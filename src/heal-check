#!/usr/bin/python3 -u

import argparse
import datetime
import hashlib
import json
import pathlib
import pprint

import dateutil.parser
import requests

argparser = argparse.ArgumentParser(description="Minimalist health-check for zebr0/heal")
argparser.add_argument("uri", help="")
argparser.add_argument("-f", "--file-prefix", default="/var/tmp/heal-check-", help="")
argparser.add_argument("-d", "--delay", type=int, default=30, help="")
ns = argparser.parse_args()


def _exit(error_cause="", remove_file=False):
    if error_cause:
        ns.error_cause = error_cause
        ns.exit_code = 1
    else:
        ns.exit_code = 0

    if (error_cause or remove_file) and ns.file_path.is_file():
        ns.file_path.unlink()
        ns.warning_file = "deleted"

    pprint.pprint(vars(ns))
    exit(ns.exit_code)


def warning(cause):
    ns.warning_cause = cause

    if not ns.file_path.is_file():
        ns.file_path.write_text(ns.utc_now.isoformat())
        ns.warning_file = "created"
        _exit()

    ns.file_content = ns.file_path.read_text()
    ns.utc_file = dateutil.parser.parse(ns.file_content)
    if ns.utc_file < ns.utc_min:
        _exit(error_cause="utc_file < utc_min")

    ns.warning_file = "unchanged"
    _exit()


try:
    ns.file_path = pathlib.Path(ns.file_prefix + hashlib.md5(ns.uri.encode("utf-8")).hexdigest())
    ns.utc_now = datetime.datetime.utcnow()
    ns.utc_min = ns.utc_now - datetime.timedelta(minutes=ns.delay)

    try:
        ns.response = requests.get(ns.uri, timeout=10)
    except requests.exceptions.RequestException as e:
        warning(str(e))

    if not ns.response.ok:
        warning(ns.response.status_code)

    ns.response_text = ns.response.text
    ns.response_json = json.loads(ns.response_text)

    ns.utc_remote = dateutil.parser.parse(ns.response_json["utc"])
    if ns.utc_remote < ns.utc_min:
        warning("utc_remote < utc_min")

    ns.status = ns.response_json["status"]
    if ns.status == "ok":
        _exit(remove_file=True)
    if ns.status == "fixing":
        warning("fixing")

    _exit(error_cause="status ko")
except Exception as e:
    _exit(error_cause=str(e))
