#!/usr/bin/python3 -u

import argparse
import datetime
import hashlib
import json
import pathlib

import dateutil.parser
import requests

argparser = argparse.ArgumentParser(description="Minimalist health-check for zebr0/heal")
argparser.add_argument("uri", help="")
argparser.add_argument("-f", "--file-prefix", default="/var/tmp/heal-check-", help="")
argparser.add_argument("-d", "--delay", type=int, default=30, help="")
argparser.add_argument("-m", "--mode", help="")
ns = argparser.parse_args()


class Error(Exception):
    pass


def handle_exit(error_cause="", remove_file=False):
    if error_cause:
        ns.error_cause = error_cause
        ns.exit_code = 1
    else:
        ns.exit_code = 0

    if (error_cause or remove_file) and ns.file_path.is_file():
        ns.file_path.unlink()
        ns.warning_file = "deleted"

    print(json.dumps(vars(ns), default=str, indent=2))
    exit(ns.exit_code)


def handle_warning(cause):
    ns.warning_cause = cause

    if not ns.file_path.is_file():
        ns.file_path.write_text(ns.utc_now.isoformat())
        ns.warning_file = "created"
        handle_exit()

    ns.file_content = ns.file_path.read_text()
    ns.utc_file = dateutil.parser.parse(ns.file_content)
    if ns.utc_file < ns.utc_min:
        handle_exit(error_cause="utc_file < utc_min")

    ns.warning_file = "unchanged"
    handle_exit()


def parse_data_from_remote():
    ns.file_path = pathlib.Path(ns.file_prefix + hashlib.md5(ns.uri.encode("utf-8")).hexdigest())
    ns.utc_now = datetime.datetime.utcnow()
    ns.utc_min = ns.utc_now - datetime.timedelta(minutes=ns.delay)

    ns.response = requests.get(ns.uri, timeout=10)
    if not ns.response.ok:
        raise Exception(ns.response.status_code)

    ns.response_text = ns.response.text
    ns.response_json = json.loads(ns.response_text)

    ns.utc_remote = dateutil.parser.parse(ns.response_json.get("utc"))
    if ns.utc_remote < ns.utc_min:
        raise Exception("utc_remote < utc_min")

    ns.status = ns.response_json.get("status")
    if ns.status == "fixing":
        raise Exception("fixing")
    if ns.status != "ok":
        raise Error("status ko")

    ns.modes = ns.response_json.get("modes")


if ns.mode:
    try:
        parse_data_from_remote()
        exit(0 if ns.mode in ns.modes else 1)
    except Exception:
        exit(1)
else:
    try:
        parse_data_from_remote()
        handle_exit(remove_file=True)
    except Error as e:
        handle_exit(str(e))
    except Exception as e:
        handle_warning(str(e))
